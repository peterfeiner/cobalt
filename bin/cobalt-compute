#!/usr/bin/python
#!/usr/bin/env python

# Copyright 2011 Gridcentric Inc.
# All Rights Reserved.
#
# Based off of the OpenStack nova-compute file 
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

"""Starter script for Nova Cobalt extension manager."""

# (amscanne): Normally, a nova service would import eventlet here and
# monkey_patch the core libraries so use the greenthread-friendly versions.
# However, since we actually execute some of the VMS code to run in separate
# threads (hence we use the tpool() functionality provided by eventlet), we 
# skip monkey_patching the thread libraries.
import eventlet
eventlet.monkey_patch(thread=False)

import gettext
import os
import sys
import gc
import traceback
import greenlet
import signal

# (amscanne) We stole this from Essex RPC code. To debug problems, we allow
# dumping of all active greenthreads. There is no cost to this code living
# on a production system.
def find_objects(t):
    return filter(lambda o: isinstance(o, t), gc.get_objects())
def print_threads():
    for i, gt in enumerate(find_objects(greenlet.greenlet)):
        sys.stderr.write("greenthread %s\n" % str(i))
        traceback.print_stack(gt.gr_frame)
    for i, stack in sys._current_frames().items():
        sys.stderr.write("thread %s\n" % str(i))
        traceback.print_stack(stack)

def sig_usr2_handler(signum, frame):
    print_threads()

signal.signal(signal.SIGUSR2, sig_usr2_handler)

gettext.install('nova', unicode=1)

# (dscannell): We need to preload this otherwise it leads to our main
# manager class not loading because we won't be able to load the virt module
# so that we may pull out the connection string paramters.
from nova.compute import instance_types

# If ../nova/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'nova', '__init__.py')):
    sys.path.insert(0, possible_topdir)

from nova import config
from nova import service
from nova.openstack.common import log as logging
from oslo.config import cfg

if __name__ == '__main__':
    config.parse_args(sys.argv)
    cobalt_opts = [
               cfg.StrOpt('cobalt_manager',
               default='cobalt.nova.extension.manager.CobaltManager',
               help='Manager for cobalt') ]
    cfg.CONF.register_opts(cobalt_opts)

    logging.setup('nova')
    server = service.Service.create(binary='cobalt')
    service.serve(server)
    service.wait()
